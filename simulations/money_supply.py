from argparse import ArgumentParser
from datetime import datetime, timedelta
from math import ceil

from numpy import nan

# 0     1   2         3        4        5      6           7          8
# Block Era BTC/block StartBTC BTCAdded EndBTC BTCIncrease %increase %made
eras = [[0, 1, 50.00000000, 0.00000000, 10500000.00000000, 10500000.00000000, nan, 50.00000000],
[210000, 2, 25.00000000, 10500000.00000000, 5250000.00000000, 15750000.00000000, 50.00000000, 75.00000008,],
[420000, 3, 12.50000000, 15750000.00000000, 2625000.00000000, 18375000.00000000, 16.66666667, 87.50000010,],
[630000, 4, 6.25000000, 18375000.00000000, 1312500.00000000, 19687500.00000000, 7.14285714, 93.75000010,],
[840000, 5, 3.12500000, 19687500.00000000, 656250.00000000, 20343750.00000000, 3.33333333, 96.87500011,],
[1050000, 6, 1.56250000, 20343750.00000000, 328125.00000000, 20671875.00000000, 1.61290323, 98.43750011,],
[1260000, 7, 0.78125000, 20671875.00000000, 164062.50000000, 20835937.50000000, 0.79365079, 99.21875011,],
[1470000, 8, 0.39062500, 20835937.50000000, 82031.25000000, 20917968.75000000, 0.39370079, 99.60937511,],
[1680000, 9, 0.19531250, 20917968.75000000, 41015.62500000, 20958984.37500000, 0.19607843, 99.80468761,],
[1890000, 10, 0.09765625, 20958984.37500000, 20507.81250000, 20979492.18750000, 0.09784736, 99.90234386,],
[2100000, 11, 0.04882812, 20979492.18750000, 10253.90520000, 20989746.09270000, 0.04887585, 99.95117198,],
[2310000, 12, 0.02441406, 20989746.09270000, 5126.95260000, 20994873.04530000, 0.02442599, 99.97558604,],
[2520000, 13, 0.01220703, 20994873.04530000, 2563.47630000, 20997436.52160000, 0.01221001, 99.98779307,],
[2730000, 14, 0.00610351, 20997436.52160000, 1281.73710000, 20998718.25870000, 0.00610426, 99.99389658,],
[2940000, 15, 0.00305175, 20998718.25870000, 640.86750000, 20999359.12620000, 0.00305194, 99.99694833,],
[3150000, 16, 0.00152587, 20999359.12620000, 320.43270000, 20999679.55890000, 0.00152592, 99.99847420,],
[3360000, 17, 0.00076293, 20999679.55890000, 160.21530000, 20999839.77420000, 0.00076294, 99.99923713,],
[3570000, 18, 0.00038146, 20999839.77420000, 80.10660000, 20999919.88080000, 0.00038146, 99.99961859,],
[3780000, 19, 0.00019073, 20999919.88080000, 40.05330000, 20999959.93410000, 0.00019073, 99.99980932,],
[3990000, 20, 0.00009536, 20999959.93410000, 20.02560000, 20999979.95970000, 0.00009536, 99.99990468,],
[4200000, 21, 0.00004768, 20999979.95970000, 10.01280000, 20999989.97250000, 0.00004768, 99.99995236,],
[4410000, 22, 0.00002384, 20999989.97250000, 5.00640000, 20999994.97890000, 0.00002384, 99.99997620,],
[4620000, 23, 0.00001192, 20999994.97890000, 2.50320000, 20999997.48210000, 0.00001192, 99.99998812,],
[4830000, 24, 0.00000596, 20999997.48210000, 1.25160000, 20999998.73370000, 0.00000596, 99.99999408,],
[5040000, 25, 0.00000298, 20999998.73370000, 0.62580000, 20999999.35950000, 0.00000298, 99.99999706,],
[5250000, 26, 0.00000149, 20999999.35950000, 0.31290000, 20999999.67240000, 0.00000149, 99.99999855,],
[5460000, 27, 0.00000074, 20999999.67240000, 0.15540000, 20999999.82780000, 0.00000074, 99.99999929,],
[5670000, 28, 0.00000037, 20999999.82780000, 0.07770000, 20999999.90550000, 0.00000037, 99.99999966,],
[5880000, 29, 0.00000018, 20999999.90550000, 0.03780000, 20999999.94330000, 0.00000018, 99.99999984,],
[6090000, 30, 0.00000009, 20999999.94330000, 0.01890000, 20999999.96220000, 0.00000009, 99.99999993,],
[6300000, 31, 0.00000004, 20999999.96220000, 0.00840000, 20999999.97060000, 0.00000004, 99.99999997,],
[6510000, 32, 0.00000002, 20999999.97060000, 0.00420000, 20999999.97480000, 0.00000002, 99.99999999,],
[6720000, 33, 0.00000001, 20999999.97480000, 0.00210000, 20999999.97690000, 0.00000001, 100.00000000,],
[6930000, 34, 0.00000000, 20999999.97690000, 0.00000000, 20999999.97690000, 0.00000000, 100.00000000,]]


_parser = ArgumentParser(description="Produces bitcoin money supply.")

def money_supply(params):
    distance, hashrate, argv = params
    args = _parser.parse_args(argv)

    genesis = datetime(2009, 1, 1)
    heights = []
    times = []
    supplies = []
    inflations = []
    for batch in range(ceil(eras[-1][0]/10000)):
        block = batch * 10000
        era = eras[(block // 210000)]
        start_block  = era[0]
        rate         = era[2]
        start_supply = era[3]
        heights.append(block)
        times.append(genesis + timedelta(seconds=(block * (10 * 60))))
        supplies.append(start_supply + ((block - start_block) * rate))
        inflations.append(rate)

    return (heights, times, supplies, inflations)
